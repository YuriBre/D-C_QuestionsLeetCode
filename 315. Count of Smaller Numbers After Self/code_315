class Solution:
    def countSmaller(self, nums):
        def merge_sort(nums, indices, counts):
            if len(nums) <= 1:
                return nums, indices

            mid = len(nums) // 2
            left_nums, left_indices = merge_sort(nums[:mid], indices[:mid], counts)
            right_nums, right_indices = merge_sort(nums[mid:], indices[mid:], counts)

            merged_nums = []
            merged_indices = []
            i = j = 0
            right_count = 0

            while i < len(left_nums) and j < len(right_nums):
                if left_nums[i] <= right_nums[j]:
                    merged_nums.append(left_nums[i])
                    merged_indices.append(left_indices[i])
                    counts[left_indices[i]] += right_count
                    i += 1
                else:
                    merged_nums.append(right_nums[j])
                    merged_indices.append(right_indices[j])
                    right_count += 1
                    j += 1

            while i < len(left_nums):
                merged_nums.append(left_nums[i])
                merged_indices.append(left_indices[i])
                counts[left_indices[i]] += right_count
                i += 1

            while j < len(right_nums):
                merged_nums.append(right_nums[j])
                merged_indices.append(right_indices[j])
                j += 1

            return merged_nums, merged_indices

        counts = [0] * len(nums)
        indices = list(range(len(nums)))
        merge_sort(nums, indices, counts)
        return counts
